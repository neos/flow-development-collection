`5.3.5 (2019-09-24) <https://github.com/neos/flow-development-collection/releases/tag/5.3.5>`_
==============================================================================================

Overview of merged pull requests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`BUGFIX: Avoid error when setting up SQLite cache backends <https://github.com/neos/flow-development-collection/pull/1766>`_
----------------------------------------------------------------------------------------------------------------------------

When configuring the `PdoBackend` to use an SQLite database
it will be set up automatically upon connection.

Invoking the `cache:setup` command afterwards leads to an
error:

   General error: 1 table "cache" already exists

With this fix, the creation of cache tables is skipped for
SQLite databases during setup.

Fixes: #1763

`BUGFIX: resource:clean will remove resource from right collection <https://github.com/neos/flow-development-collection/pull/1678>`_
------------------------------------------------------------------------------------------------------------------------------------

This fix makes sure `resource:clean` will remove broken resources from the right collection.

The problem is that you save the SHA1 for a broken resource. Now think about the following case: You have two resources with the same SHA1, but from two different collections (`persistent`/`temporary`). The resource inside the `temporary`-Collection was removed and now you run the command.

It will detect the missing resource from the `temporary`-Collection and add the SHA1 to `$brokenResources`. Now when iteration over `$brokenResources` to get the `PersistentResource` you are using `$this->resourceRepository->findOneBySha1($resourceSha1)`, which ignores the collection. So you can't be sure to get the `PersistentResource` from the `temporary`-Collection that you actually want, it's possible that you get the one from the `persistent`-Collection. This would result in deleting the wrong `PersistentResource` and not removing the broken resource but creating a new problem.

The fix just saves the identifier of the `PersistentResource` to `$brokenResources` and later detects the correct one agin by using `$this->resourceRepository->findByIdentifier($resourceIdentifier)`.

* Packages: ``Flow``

` BUGFIX: Replacing suffixes appends, if nothing to replace <https://github.com/neos/flow-development-collection/pull/1741>`_
-----------------------------------------------------------------------------------------------------------------------------

The `UriConstraints` behaves weird with `replaceSuffixes` on hosts: if the suffix to
replace is not found, the replacement is appended to the host - instead of nothing
happening.

* Packages: ``Flow``

`TASK: Add example development config for allowing all proxies <https://github.com/neos/flow-development-collection/pull/1646>`_
--------------------------------------------------------------------------------------------------------------------------------

In order to make https://github.com/neos/flow-development-collection/pull/1586 more approachable without actually setting a default value in Development.

* Packages: ``Flow``

`BUGFIX: Adjust installation documentation to account for missing routes config <https://github.com/neos/flow-development-collection/pull/1748>`_
-------------------------------------------------------------------------------------------------------------------------------------------------

Adds missing documentation that it is required to rename ``Settings.yaml.example`` in order to
have working routing and see the "Welcome" page.

See https://github.com/neos/flow-development-collection/issues/868#issuecomment-279682930

Thanks M.B. from our forum for bringing it up again.

* Packages: ``Flow``

`Detailed log <https://github.com/neos/flow-development-collection/compare/5.3.4...5.3.5>`_
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
